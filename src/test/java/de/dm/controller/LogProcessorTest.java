package de.dm.controller;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.google.inject.Guice;
import com.google.inject.Injector;

import de.dm.main.ParserModule;
import de.sidafe.logEntries.ACAP;
import de.sidafe.logEntries.ADIO;
import de.sidafe.logEntries.AFUS;
import de.sidafe.logEntries.AIND;
import de.sidafe.logEntries.AJUM;
import de.sidafe.logEntries.AMEA;
import de.sidafe.logEntries.ARES;
import de.sidafe.logEntries.AZEN;
import de.sidafe.logEntries.BATCH;
import de.sidafe.logEntries.BLOCK;
import de.sidafe.logEntries.BTEST;
import de.sidafe.logEntries.DT;
import de.sidafe.logEntries.LIM2;
import de.sidafe.logEntries.LIM3;
import de.sidafe.logEntries.MCL;
import de.sidafe.logEntries.PF;
import de.sidafe.logEntries.TJET;
import de.sidafe.logEntries.TS;
import de.sidafe.util.ILogEntryNode;

public class LogProcessorTest {

	private LogProcessor logProcessor;
	private Injector injector = Guice.createInjector(new ParserModule());
	 
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {		
		logProcessor = injector.getInstance(LogProcessor.class);
	}

	@Test
	public void testGetBaumSnapshot1() {
		ILogEntryNode root = logProcessor
				.getBaum("src/test/resources/Snapshot1");
		ILogEntryNode batch = root;
		assertEquals(BATCH.class, batch.getLogEntry().getClass());
		assertEquals("SEP13676",batch.getLogEntry().getValues().get(0));
		ILogEntryNode btest = batch.getSubNodes().get(0);
		assertEquals("VM122691746",btest.getLogEntry().getValues().get(0));
		assertEquals(BTEST.class, btest.getLogEntry().getClass());
		ILogEntryNode block0 = btest.getSubNodes().get(0);
		assertEquals(BLOCK.class, block0.getLogEntry().getClass());
		assertEquals("f1%jp1_2",block0.getLogEntry().getValues().get(0));
		ILogEntryNode block0_ajum = block0.getSubNodes().get(0);
		assertEquals(AJUM.class, block0_ajum.getLogEntry().getClass());
		assertEquals("1",block0_ajum.getLogEntry().getValues().get(0));
		ILogEntryNode block0_ajum_lim2 = block0_ajum.getSubNodes().get(0);
		assertEquals(LIM2.class, block0_ajum_lim2.getLogEntry().getClass());
		assertEquals("+1.130000E+00",block0_ajum_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode btest_pf = btest.getSubNodes().get(1);
		assertEquals(PF.class, btest_pf.getLogEntry().getClass());
		assertEquals("pins",btest_pf.getLogEntry().getValues().get(0));
		ILogEntryNode block1 = btest.getSubNodes().get(2);
		assertEquals(BLOCK.class, block1.getLogEntry().getClass());
		assertEquals("f2%jp1_2",block1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ajum = block1.getSubNodes().get(0);
		assertEquals(AJUM.class, block1_ajum.getLogEntry().getClass());
		assertEquals("2",block1_ajum.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ajum_lim2 = block1_ajum.getSubNodes().get(0);
		assertEquals(LIM2.class, block1_ajum_lim2.getLogEntry().getClass());
		assertEquals("+2.130000E+00",block1_ajum_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block2 = btest.getSubNodes().get(3);
		assertEquals(BLOCK.class, block2.getLogEntry().getClass());
		assertEquals("f3%jp1_2",block2.getLogEntry().getValues().get(0));
		ILogEntryNode block2_ajum = block2.getSubNodes().get(0);
		assertEquals(AJUM.class, block2_ajum.getLogEntry().getClass());
		assertEquals("3",block2_ajum.getLogEntry().getValues().get(0));
		ILogEntryNode block2_ajum_lim2 = block2_ajum.getSubNodes().get(0);
		assertEquals(LIM2.class, block2_ajum_lim2.getLogEntry().getClass());
		assertEquals("+3.130000E+00",block2_ajum_lim2.getLogEntry().getValues().get(0));
	}
	
	@Test
	public void testGetBaumSnapshot2() {
		ILogEntryNode root = logProcessor.getBaum("src/test/resources/Snapshot2");
		ILogEntryNode batch = root;
		assertEquals(BATCH.class, batch.getLogEntry().getClass());
		assertEquals("P14032",batch.getLogEntry().getValues().get(0));
		ILogEntryNode btest = batch.getSubNodes().get(0);
		assertEquals(BTEST.class, btest.getLogEntry().getClass());
		assertEquals("VJ110200224",btest.getLogEntry().getValues().get(0));
		ILogEntryNode block0 = btest.getSubNodes().get(0);
		assertEquals(BLOCK.class, block0.getLogEntry().getClass());
		assertEquals("fs1",block0.getLogEntry().getValues().get(0));
		ILogEntryNode block0_afus = block0.getSubNodes().get(0);
		assertEquals(AFUS.class, block0_afus.getLogEntry().getClass());
		assertEquals("1",block0_afus.getLogEntry().getValues().get(0));
		ILogEntryNode block0_afus_lim2 = block0_afus.getSubNodes().get(0);
		assertEquals(LIM2.class, block0_afus_lim2.getLogEntry().getClass());
		assertEquals("+1.510000E+01",block0_afus_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block1 = btest.getSubNodes().get(1);
		assertEquals(BLOCK.class, block1.getLogEntry().getClass());
		assertEquals("c1251",block1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_acap = block1.getSubNodes().get(0);
		assertEquals(ACAP.class, block1_acap.getLogEntry().getClass());
		assertEquals("2",block1_acap.getLogEntry().getValues().get(0));
		ILogEntryNode block1_acap_lim3 = block1_acap.getSubNodes().get(0);
		assertEquals(LIM3.class, block1_acap_lim3.getLogEntry().getClass());
		assertEquals("+2.201150E-04",block1_acap_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block2 = btest.getSubNodes().get(2);
		assertEquals(BLOCK.class, block2.getLogEntry().getClass());
		assertEquals("d2%cr1",block2.getLogEntry().getValues().get(0));
		ILogEntryNode block2_adio = block2.getSubNodes().get(0);
		assertEquals(ADIO.class, block2_adio.getLogEntry().getClass());
		assertEquals("3",block2_adio.getLogEntry().getValues().get(0));
		ILogEntryNode block2_adio_lim2 = block2_adio.getSubNodes().get(0);
		assertEquals(LIM2.class, block2_adio_lim2.getLogEntry().getClass());
		assertEquals("+3.490000E-01",block2_adio_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block3 = btest.getSubNodes().get(3);
		assertEquals(BLOCK.class, block3.getLogEntry().getClass());
		assertEquals("r31",block3.getLogEntry().getValues().get(0));
		ILogEntryNode block3_ares = block3.getSubNodes().get(0);
		assertEquals(ARES.class, block3_ares.getLogEntry().getClass());
		assertEquals("4",block3_ares.getLogEntry().getValues().get(0));
		ILogEntryNode block3_ares_lim3 = block3_ares.getSubNodes().get(0);
		assertEquals(LIM3.class, block3_ares_lim3.getLogEntry().getClass());
		assertEquals("+4.020000E+05",block3_ares_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block4 = btest.getSubNodes().get(4);
		assertEquals(BLOCK.class, block4.getLogEntry().getClass());
		assertEquals("r267",block4.getLogEntry().getValues().get(0));
		ILogEntryNode block4_ares0 = block4.getSubNodes().get(0);
		assertEquals(ARES.class, block4_ares0.getLogEntry().getClass());
		assertEquals("5",block4_ares0.getLogEntry().getValues().get(0));
		ILogEntryNode block4_ares0_lim3 = block4_ares0.getSubNodes().get(0);
		assertEquals(LIM3.class, block4_ares0_lim3.getLogEntry().getClass());
		assertEquals("+5.200000E+00",block4_ares0_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block4_ares1 = block4.getSubNodes().get(1);
		assertEquals(ARES.class, block4_ares1.getLogEntry().getClass());
		assertEquals("6",block4_ares1.getLogEntry().getValues().get(0));
		ILogEntryNode block4_ares1_lim3 = block4_ares1.getSubNodes().get(0);
		assertEquals(LIM3.class, block4_ares1_lim3.getLogEntry().getClass());
		assertEquals("+6.200000E+00",block4_ares1_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block4_amea = block4.getSubNodes().get(2);
		assertEquals(AMEA.class, block4_amea.getLogEntry().getClass());
		assertEquals("7",block4_amea.getLogEntry().getValues().get(0));
		ILogEntryNode block4_amea_lim2 = block4_amea.getSubNodes().get(0);
		assertEquals(LIM2.class, block4_amea_lim2.getLogEntry().getClass());
		assertEquals("+7.000000E+00",block4_amea_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block5 = btest.getSubNodes().get(5);
		assertEquals(BLOCK.class, block5.getLogEntry().getClass());
		assertEquals("d21%ds",block5.getLogEntry().getValues().get(0));
		ILogEntryNode block5_azen = block5.getSubNodes().get(0);
		assertEquals(AZEN.class, block5_azen.getLogEntry().getClass());
		assertEquals("8",block5_azen.getLogEntry().getValues().get(0));
		ILogEntryNode block5_azen_lim3 = block5_azen.getSubNodes().get(0);
		assertEquals(LIM3.class, block5_azen_lim3.getLogEntry().getClass());
		assertEquals("+8.500000E+00",block5_azen_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block6 = btest.getSubNodes().get(6);
		assertEquals(BLOCK.class, block6.getLogEntry().getClass());
		assertEquals("testjet",block6.getLogEntry().getValues().get(0));
		ILogEntryNode block6_tjet0 = block6.getSubNodes().get(0);
		assertEquals(TJET.class, block6_tjet0.getLogEntry().getClass());
		assertEquals("09",block6_tjet0.getLogEntry().getValues().get(0));
		ILogEntryNode block6_tjet1 = block6.getSubNodes().get(1);
		assertEquals(TJET.class, block6_tjet1.getLogEntry().getClass());
		assertEquals("10",block6_tjet1.getLogEntry().getValues().get(0));
		ILogEntryNode mcl0 = btest.getSubNodes().get(7);
		assertEquals(MCL.class, mcl0.getLogEntry().getClass());
		assertEquals("1",mcl0.getLogEntry().getValues().get(0));
		ILogEntryNode mcl1 = btest.getSubNodes().get(8);
		assertEquals(MCL.class, mcl1.getLogEntry().getClass());
		assertEquals("2",mcl1.getLogEntry().getValues().get(0));
	}
	
	@Test
	public void testGetBaumSnapshot3() {
		ILogEntryNode root = logProcessor.getBaum("src/test/resources/Snapshot3");
		ILogEntryNode batch = root;
		assertEquals(BATCH.class, batch.getLogEntry().getClass());
		assertEquals("SEP13676",batch.getLogEntry().getValues().get(0));
		ILogEntryNode btest = batch.getSubNodes().get(0);
		assertEquals(BTEST.class, btest.getLogEntry().getClass());
		assertEquals("VM122691746",btest.getLogEntry().getValues().get(0));
		ILogEntryNode block0 = btest.getSubNodes().get(0);
		assertEquals(BLOCK.class, block0.getLogEntry().getClass());
		assertEquals("f1%jp1_2",block0.getLogEntry().getValues().get(0));
		ILogEntryNode block0_ajum0 = block0.getSubNodes().get(0);
		assertEquals(AJUM.class, block0_ajum0.getLogEntry().getClass());
		assertEquals("1",block0_ajum0.getLogEntry().getValues().get(0));
		ILogEntryNode block0_ajum1 = block0.getSubNodes().get(1);
		assertEquals(AJUM.class, block0_ajum1.getLogEntry().getClass());
		assertEquals("2",block0_ajum1.getLogEntry().getValues().get(0));
		ILogEntryNode pf0 = btest.getSubNodes().get(1);
		assertEquals(PF.class, pf0.getLogEntry().getClass());
		assertEquals("pins1",pf0.getLogEntry().getValues().get(0));
		ILogEntryNode pf1 = btest.getSubNodes().get(2);
		assertEquals(PF.class, pf1.getLogEntry().getClass());
		assertEquals("pins2",pf1.getLogEntry().getValues().get(0));
		ILogEntryNode block1 = btest.getSubNodes().get(3);
		assertEquals(BLOCK.class, block1.getLogEntry().getClass());
		assertEquals("f2%jp1_2",block1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ajum0 = block1.getSubNodes().get(0);
		assertEquals(AJUM.class, block1_ajum0.getLogEntry().getClass());
		assertEquals("5",block1_ajum0.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ajum1 = block1.getSubNodes().get(1);
		assertEquals(AJUM.class, block1_ajum1.getLogEntry().getClass());
		assertEquals("6",block1_ajum1.getLogEntry().getValues().get(0));
		ILogEntryNode pf2 = btest.getSubNodes().get(4);
		assertEquals(PF.class, pf2.getLogEntry().getClass());
		assertEquals("pins3",pf2.getLogEntry().getValues().get(0));
		ILogEntryNode pf3 = btest.getSubNodes().get(5);
		assertEquals(PF.class, pf3.getLogEntry().getClass());
		assertEquals("pins4",pf3.getLogEntry().getValues().get(0));
	}
	
	@Test
	public void testGetBaumSnapshot4() {
		ILogEntryNode root = logProcessor.getBaum("src/test/resources/Snapshot4");
		ILogEntryNode batch = root;
		assertEquals(BATCH.class, batch.getLogEntry().getClass());
		assertEquals("SEP13676",batch.getLogEntry().getValues().get(0));
		ILogEntryNode btest = batch.getSubNodes().get(0);
		assertEquals(BTEST.class, btest.getLogEntry().getClass());
		assertEquals("VM122691746",btest.getLogEntry().getValues().get(0));
		ILogEntryNode block0 = btest.getSubNodes().get(0);
		assertEquals(BLOCK.class, block0.getLogEntry().getClass());
		assertEquals("f1%jp1_2",block0.getLogEntry().getValues().get(0));
		ILogEntryNode block0_ajum = block0.getSubNodes().get(0);
		assertEquals(AJUM.class, block0_ajum.getLogEntry().getClass());
		assertEquals("1",block0_ajum.getLogEntry().getValues().get(0));
		ILogEntryNode block0_ares = block0.getSubNodes().get(1);
		assertEquals(ARES.class, block0_ares.getLogEntry().getClass());
		assertEquals("2",block0_ares.getLogEntry().getValues().get(0));
		ILogEntryNode block0_amea = block0.getSubNodes().get(2);
		assertEquals(AMEA.class, block0_amea.getLogEntry().getClass());
		assertEquals("3",block0_amea.getLogEntry().getValues().get(0));
		ILogEntryNode block0_afus = block0.getSubNodes().get(3);
		assertEquals(AFUS.class, block0_afus.getLogEntry().getClass());
		assertEquals("4",block0_afus.getLogEntry().getValues().get(0));
		ILogEntryNode block0_aind = block0.getSubNodes().get(4);
		assertEquals(AIND.class, block0_aind.getLogEntry().getClass());
		assertEquals("5",block0_aind.getLogEntry().getValues().get(0));
		ILogEntryNode block0_azen = block0.getSubNodes().get(5);
		assertEquals(AZEN.class, block0_azen.getLogEntry().getClass());
		assertEquals("6",block0_azen.getLogEntry().getValues().get(0));
		ILogEntryNode block0_acap = block0.getSubNodes().get(6);
		assertEquals(ACAP.class, block0_acap.getLogEntry().getClass());
		assertEquals("7",block0_acap.getLogEntry().getValues().get(0));
		ILogEntryNode block0_adio = block0.getSubNodes().get(7);
		assertEquals(ADIO.class, block0_adio.getLogEntry().getClass());
		assertEquals("8",block0_adio.getLogEntry().getValues().get(0));
		ILogEntryNode block0_tjet = block0.getSubNodes().get(8);
		assertEquals(TJET.class, block0_tjet.getLogEntry().getClass());
		assertEquals("01",block0_tjet.getLogEntry().getValues().get(0));
		ILogEntryNode pf0 = btest.getSubNodes().get(1);
		assertEquals(PF.class, pf0.getLogEntry().getClass());		
		assertEquals("pins",pf0.getLogEntry().getValues().get(0));
		ILogEntryNode block1 = btest.getSubNodes().get(2);
		assertEquals(BLOCK.class, block1.getLogEntry().getClass());
		assertEquals("f2%jp1_2",block1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ajum = block1.getSubNodes().get(0);
		assertEquals(AJUM.class, block1_ajum.getLogEntry().getClass());
		assertEquals("9",block1_ajum.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ares = block1.getSubNodes().get(1);
		assertEquals(ARES.class, block1_ares.getLogEntry().getClass());
		assertEquals("10",block1_ares.getLogEntry().getValues().get(0));
		ILogEntryNode block1_amea = block1.getSubNodes().get(2);
		assertEquals(AMEA.class, block1_amea.getLogEntry().getClass());
		assertEquals("11",block1_amea.getLogEntry().getValues().get(0));
		ILogEntryNode block1_afus = block1.getSubNodes().get(3);
		assertEquals(AFUS.class, block1_afus.getLogEntry().getClass());
		assertEquals("12",block1_afus.getLogEntry().getValues().get(0));
		ILogEntryNode block1_aind = block1.getSubNodes().get(4);
		assertEquals(AIND.class, block1_aind.getLogEntry().getClass());
		assertEquals("13",block1_aind.getLogEntry().getValues().get(0));
		ILogEntryNode block1_azen = block1.getSubNodes().get(5);
		assertEquals(AZEN.class, block1_azen.getLogEntry().getClass());
		assertEquals("14",block1_azen.getLogEntry().getValues().get(0));
		ILogEntryNode block1_acap = block1.getSubNodes().get(6);
		assertEquals(ACAP.class, block1_acap.getLogEntry().getClass());
		assertEquals("15",block1_acap.getLogEntry().getValues().get(0));
		ILogEntryNode block1_adio = block1.getSubNodes().get(7);
		assertEquals(ADIO.class, block1_adio.getLogEntry().getClass());
		assertEquals("16",block1_adio.getLogEntry().getValues().get(0));
		ILogEntryNode block1_tjet = block1.getSubNodes().get(8);
		assertEquals(TJET.class, block1_tjet.getLogEntry().getClass());
		assertEquals("02",block1_tjet.getLogEntry().getValues().get(0));
		ILogEntryNode mcl = btest.getSubNodes().get(3);
		assertEquals(MCL.class, mcl.getLogEntry().getClass());
		assertEquals("03",mcl.getLogEntry().getValues().get(0));
		ILogEntryNode ts = btest.getSubNodes().get(4);
		assertEquals(TS.class, ts.getLogEntry().getClass());
		assertEquals("04",ts.getLogEntry().getValues().get(0));
		ILogEntryNode dt = btest.getSubNodes().get(5);
		assertEquals(DT.class, dt.getLogEntry().getClass());
		assertEquals("5",dt.getLogEntry().getValues().get(0));
	}
	
	@Test
	public void testGetBaumSnapshot5() {
		ILogEntryNode root = logProcessor.getBaum("src/test/resources/Snapshot5");
		ILogEntryNode batch = root;
		assertEquals(BATCH.class, batch.getLogEntry().getClass());
		assertEquals("SEP13676",batch.getLogEntry().getValues().get(0));
		ILogEntryNode btest = batch.getSubNodes().get(0);
		assertEquals(BTEST.class, btest.getLogEntry().getClass());
		assertEquals("VM123493867",btest.getLogEntry().getValues().get(0));
		ILogEntryNode block0 = btest.getSubNodes().get(0);
		assertEquals(BLOCK.class, block0.getLogEntry().getClass());
		assertEquals("pb1%l",block0.getLogEntry().getValues().get(0));
		ILogEntryNode block0_aind = block0.getSubNodes().get(0);
		assertEquals(AIND.class, block0_aind.getLogEntry().getClass());
		assertEquals("0",block0_aind.getLogEntry().getValues().get(0));
		ILogEntryNode block0_aind_lim3 = block0_aind.getSubNodes().get(0);
		assertEquals(LIM3.class, block0_aind_lim3.getLogEntry().getClass());
		assertEquals("+1.150000E-04",block0_aind_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode ts0 = btest.getSubNodes().get(1);
		assertEquals(TS.class, ts0.getLogEntry().getClass());
		assertEquals("1",ts0.getLogEntry().getValues().get(0));
		ILogEntryNode ts1 = btest.getSubNodes().get(2);
		assertEquals(TS.class, ts1.getLogEntry().getClass());
		assertEquals("2",ts1.getLogEntry().getValues().get(0));
		ILogEntryNode ts2 = btest.getSubNodes().get(3);
		assertEquals("3",ts2.getLogEntry().getValues().get(0));
		assertEquals(TS.class, ts2.getLogEntry().getClass());
		ILogEntryNode block1 = btest.getSubNodes().get(4);
		assertEquals(BLOCK.class, block1.getLogEntry().getClass());
		ILogEntryNode block1_ares0 = block1.getSubNodes().get(0);
		assertEquals("1",block1_ares0.getLogEntry().getValues().get(0));
		assertEquals(ARES.class, block1_ares0.getLogEntry().getClass());
		ILogEntryNode block1_ares0_lim3 = block1_ares0.getSubNodes().get(0);
		assertEquals(LIM3.class, block1_ares0_lim3.getLogEntry().getClass());
		assertEquals("+2.020000E+05",block1_ares0_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ares1 = block1.getSubNodes().get(1);
		assertEquals(ARES.class, block1_ares1.getLogEntry().getClass());
		assertEquals("2",block1_ares1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_ares1_lim3 = block1_ares1.getSubNodes().get(0);
		assertEquals(LIM3.class, block1_ares1_lim3.getLogEntry().getClass());
		assertEquals("+3.020000E+05",block1_ares1_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block1_amea0 = block1.getSubNodes().get(2);
		assertEquals(AMEA.class, block1_amea0.getLogEntry().getClass());
		assertEquals("1", block1_amea0.getLogEntry().getValues().get(0));
		ILogEntryNode block1_amea0_lim2 = block1_amea0.getSubNodes().get(0);
		assertEquals(LIM2.class, block1_amea0_lim2.getLogEntry().getClass());
		assertEquals("+4.000000E+00", block1_amea0_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block1_amea1 = block1.getSubNodes().get(3);
		assertEquals(AMEA.class, block1_amea1.getLogEntry().getClass());
		assertEquals("2", block1_amea1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_amea1_lim2 = block1_amea1.getSubNodes().get(0);
		assertEquals(LIM2.class, block1_amea1_lim2.getLogEntry().getClass());
		assertEquals("+5.000000E+00", block1_amea1_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block1_afus0 = block1.getSubNodes().get(4);
		assertEquals(AFUS.class, block1_afus0.getLogEntry().getClass());
		assertEquals("1", block1_afus0.getLogEntry().getValues().get(0));
		ILogEntryNode block1_afus0_lim2 = block1_afus0.getSubNodes().get(0);
		assertEquals(LIM2.class, block1_afus0_lim2.getLogEntry().getClass());
		assertEquals("+6.510000E+01", block1_afus0_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block1_afus1 = block1.getSubNodes().get(5);
		assertEquals("2", block1_afus1.getLogEntry().getValues().get(0));
		assertEquals(AFUS.class, block1_afus1.getLogEntry().getClass());
		ILogEntryNode block1_afus1_lim2 = block1_afus1.getSubNodes().get(0);
		assertEquals(LIM2.class, block1_afus1_lim2.getLogEntry().getClass());
		assertEquals("+7.510000E+01", block1_afus1_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block1_azen0 = block1.getSubNodes().get(6);
		assertEquals(AZEN.class, block1_azen0.getLogEntry().getClass());
		assertEquals("1", block1_azen0.getLogEntry().getValues().get(0));
		ILogEntryNode block1_azen0_lim3 = block1_azen0.getSubNodes().get(0);
		assertEquals("+8.500000E+00", block1_azen0_lim3.getLogEntry().getValues().get(0));
		assertEquals(LIM3.class, block1_azen0_lim3.getLogEntry().getClass());
		ILogEntryNode block1_azen1 = block1.getSubNodes().get(7);
		assertEquals(AZEN.class, block1_azen1.getLogEntry().getClass());
		assertEquals("2", block1_azen1.getLogEntry().getValues().get(0));
		ILogEntryNode block1_azen1_lim3 = block1_azen1.getSubNodes().get(0);
		assertEquals(LIM3.class, block1_azen1_lim3.getLogEntry().getClass());
		assertEquals("+9.500000E+00", block1_azen1_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block1_acap0 = block1.getSubNodes().get(8);
		assertEquals(ACAP.class, block1_acap0.getLogEntry().getClass());
		assertEquals("1", block1_acap0.getLogEntry().getValues().get(0));
		ILogEntryNode block1_acap0_lim3 = block1_acap0.getSubNodes().get(0);
		assertEquals(LIM3.class, block1_acap0_lim3.getLogEntry().getClass());
		assertEquals("+10.201150E-04", block1_acap0_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block1_acap1 = block1.getSubNodes().get(9);
		assertEquals("2", block1_acap1.getLogEntry().getValues().get(0));
		assertEquals(ACAP.class, block1_acap1.getLogEntry().getClass());
		ILogEntryNode block1_acap1_lim3 = block1_acap1.getSubNodes().get(0);
		assertEquals(LIM3.class, block1_acap1_lim3.getLogEntry().getClass());
		assertEquals("+11.201150E-04", block1_acap1_lim3.getLogEntry().getValues().get(0));
		ILogEntryNode block1_adio0 = block1.getSubNodes().get(10);
		assertEquals("1", block1_adio0.getLogEntry().getValues().get(0));
		assertEquals(ADIO.class, block1_adio0.getLogEntry().getClass());
		ILogEntryNode block1_adio0_lim2 = block1_adio0.getSubNodes().get(0);
		assertEquals("+12.490000E-01", block1_adio0_lim2.getLogEntry().getValues().get(0));
		assertEquals(LIM2.class, block1_adio0_lim2.getLogEntry().getClass());
		ILogEntryNode block1_adio1 = block1.getSubNodes().get(11);
		assertEquals("2", block1_adio1.getLogEntry().getValues().get(0));
		assertEquals(ADIO.class, block1_adio1.getLogEntry().getClass());
		ILogEntryNode block1_adio1_lim2 = block1_adio1.getSubNodes().get(0);
		assertEquals(LIM2.class, block1_adio1_lim2.getLogEntry().getClass());
		assertEquals("+13.490000E-01", block1_adio1_lim2.getLogEntry().getValues().get(0));
		ILogEntryNode block1_tjet0 = block1.getSubNodes().get(12);
		assertEquals(TJET.class, block1_tjet0.getLogEntry().getClass());
		assertEquals("01", block1_tjet0.getLogEntry().getValues().get(0));
		ILogEntryNode block1_tjet1 = block1.getSubNodes().get(13);
		assertEquals(TJET.class, block1_tjet1.getLogEntry().getClass());
		assertEquals("02", block1_tjet1.getLogEntry().getValues().get(0));
		ILogEntryNode dt0 = btest.getSubNodes().get(5);
		assertEquals(DT.class, dt0.getLogEntry().getClass());
		assertEquals("1", dt0.getLogEntry().getValues().get(0));
		ILogEntryNode dt1 = btest.getSubNodes().get(6);
		assertEquals(DT.class, dt1.getLogEntry().getClass());
		assertEquals("2", dt1.getLogEntry().getValues().get(0));
	}
			
}
